---
- name: db Playbook
  hosts: db_host
  become: yes
  tasks:
    - name: Updating repos
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400
      become: yes
    - name: Installing packages
      ansible.builtin.apt:
        name:
          - postgresql-contrib
          - postgresql-common
          - python3
          - python3-dev
          - python3-pip
          - jq
      become: yes
    - name: Creates directory
      ansible.builtin.file:
        path: /oracle/pg_data/archive
        owner: postgres
        group: postgres
        state: directory
      become: yes
    - name: Find out if PostgreSQL is initialized
      ansible.builtin.command: 
        cmd: "pg_ctlcluster 16 main status"
      register: postgres_status
      ignore_errors: true
      become: yes

    - name: Initialize PostgreSQL
      ansible.builtin.command: 
        cmd: "pg_createcluster 16 main"
      when: postgres_status.stdout.find('specified cluster \'16 main\' does not exist') != -1
      become: yes
    - name: Get pg_hba path
      ansible.builtin.shell: "pg_lsclusters --json | jq -r '.[].config.hba_file'"
      register: pg_hba_path

    - name: Get postgresql.conf path
      ansible.builtin.shell: "pg_lsclusters --json | jq -r '.[].configdir'"
      register: pg_conf_path

    - name: Setup pg_hba.conf
      ansible.builtin.blockinfile:
        create: true
        path: "{{pg_hba_path.stdout}}"
        block: |
          local all {{DB_USER}} peer
          host all all 0.0.0.0/0 password
          host replication {{DB_REPL_USER}} {{DB_REPL_HOST}}/24 trust
      become: yes
      become_user: root
    - name: Setup postgresql.conf
      ansible.builtin.blockinfile:
        create: true
        path: "{{pg_conf_path.stdout}}/postgresql.conf"
        block: | 
          listen_addresses = '*'
          port = {{DB_PORT}}
          log_destination = 'stderr'
          logging_collector = on
          log_directory = '/var/log/postgresql/'
          log_filename = 'postgresql.log'
          log_file_mode = 0644
          archive_mode = on
          archive_command = 'cp %p /oracle/pg_data/archive/%f'
          max_wal_senders = 10
          wal_level = replica
          wal_log_hints = on
          log_replication_commands = on
      become: yes
    - name: Restart PostgreSQL
      ansible.builtin.service:
          name: postgresql@16-main
          state: restarted
      become: yes
    - name: Creating master database
      community.postgresql.postgresql_db:
        name: "{{ DB_DATABASE }}"
      become: yes
      become_user: postgres
    - name: Creating Emails database
      community.postgresql.postgresql_table:
        db: "{{ DB_DATABASE }}"
        name: emails
        columns:
          - id serial primary key
          - email text
      become: yes
      become_user: postgres
    - name: Creating Phone Numbers database
      community.postgresql.postgresql_table:
        db: "{{ DB_DATABASE }}"
        name: phone_numbers
        columns:
          - id serial primary key
          - value text
      become: yes
      become_user: postgres

    - name: Change postgres_password
      community.postgresql.postgresql_user:
        name: "{{DB_USER}}"
        password: "{{DB_PASSWORD}}"
      become: yes
      become_user: postgres
    - name: Create repl_user
      community.postgresql.postgresql_user:
        name: "{{DB_REPL_USER}}"
        password: "{{DB_REPL_PASSWORD}}"
        role_attr_flags: REPLICATION,LOGIN,SUPERUSER
      become: yes
      become_user: postgres

      environment:
        POSTGRES_USER: "{{ DB_USER }}"
        POSTGRES_PASSWORD: "{{ DB_PASSWORD }}"
        DB_REPL_USER: "{{ DB_REPL_USER }}"
        DB_REPL_PASSWORD: "{{ DB_REPL_PASSWORD }}"
        DB_REPL_HOST: "{{ DB_REPL_HOST }}"
        DB_PORT: "{{ DB_PORT }}"
        DB_DATABASE: "{{ DB_DATABASE }}"

- name: db_repl Playbook
  hosts: db_repl
  become: yes
  tasks:
    - name: Updating repos
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400
      become: yes
    - name: Installing packages
      apt:
        name:
          - postgresql-contrib
          - postgresql-common
          - python3
          - python3-dev
          - python3-pip
          - jq
      become: yes
    - name: Find out if PostgreSQL is initialized
      ansible.builtin.command:
        cmd: "pg_ctlcluster 16 main status"
      register: postgres_status
      ignore_errors: true
      become: yes
      become_user: root

    - name: Initialize PostgreSQL
      ansible.builtin.command:
        cmd: "pg_createcluster 16 main"
      when: postgres_status.stdout.find('specified cluster \'16 main\' does not exist') != -1
      become: yes
      become_user: root

    - name: Get postgresql.conf path
      ansible.builtin.shell: "pg_lsclusters --json | jq -r '.[].configdir'"
      register: pg_conf_path
      become: yes
      become_user: root
    - name: Setup postgresql.conf
      ansible.builtin.blockinfile:
        create: true
        path: "{{pg_conf_path.stdout}}/postgresql.conf"
        block: |
          listen_addresses = 'localhost, {{DB_REPL_HOST}}'
          port = {{DB_REPL_PORT}}
      become: yes
      become_user: root
    - name: Stop PostgreSQL
      ansible.builtin.service:
        name: postgresql@16-main
        state: stopped
      become: yes
      become_user: root

    - name: Get directory for backup
      ansible.builtin.shell: "pg_lsclusters --json | jq -r '.[].pgdata'"
      register: data_dir
      become: yes
      become_user: root
    - name: Clean up directory
      ansible.builtin.file:
        state: "{{item}}"
        path: "{{data_dir.stdout}}"
        owner: postgres
        group: postgres
        mode: 0750
      with_items:
        - absent
        - directory
      become: yes
      become_user: root

    - name: Execute pg_basebackup
      ansible.builtin.command:
        cmd: |
          pg_basebackup -v -R -h {{DB_HOST}} -p {{DB_PORT}} -U {{DB_REPL_USER}} -w -P -D {{data_dir.stdout}}
      become: yes
      become_user: postgres
      environment:
        PGPASSWORD: "{{ DB_REPL_PASSWORD }}"
      
    - name: Start PostgreSQL
      ansible.builtin.service:
        name: postgresql@16-main
        state: started
      become: yes
      become_user: root

      environment:
        DB_HOST: "{{ DB_HOST }}"
        DB_PORT: "{{ DB_PORT }}"
        DB_REPL_HOST: "{{ DB_REPL_HOST }}"
        DB_REPL_PORT: "{{ DB_REPL_PORT }}"
        DB_REPL_USER: "{{ DB_REPL_USER }}"
        DB_REPL_PASSWORD: "{{ DB_REPL_PASSWORD }}"

- name: bot Playbook
  hosts: bot_host
  become: yes
  tasks:
    - name: Installing packages
      apt:
        name: 
          - postgresql-contrib
          - postgresql-common
          - python3
          - python3-dev
          - python3-pip
      become: yes
    - name: Installing Python packages
      pip:                
        name:
          - python-telegram-bot==13.7
          - paramiko
          - psycopg2-binary
          - python-dotenv
      become: yes
    - name: Creating working dir
      ansible.builtin.file:
        path: /srv/devops_bot
        owner: ansible
        group: ansible
        state: directory
        mode: '0777'

    - name: Get bot
      ansible.builtin.get_url:
        url: https://github.com/Kal1bry/devops_bot/tree/docker/bot
        dest: /srv/devops_bot/bot.py
        mode: '0755'

    - name: Run Bot
      ansible.builtin.command:
        cmd: python3 /srv/devops_bot/bot.py
      environment:
        TOKEN: "{{TOKEN}}"
        DB_HOST: "{{ DB_HOST }}"
        DB_USER: "{{ DB_USER }}"
        DB_PASSWORD: "{{ DB_PASSWORD }}"
        DB_DATABASE: "{{ DB_DATABASE }}"
        RM_HOST: "{{ RM_HOST }}"
        RM_PORT: "{{ RM_PORT }}"
        RM_USER: "{{ RM_USER }}"
        RM_PASSWORD: "{{ RM_PASSWORD }}"
